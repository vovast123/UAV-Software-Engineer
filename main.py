from dronekit_sitl import SITL
from dronekit import connect, VehicleMode, LocationGlobalRelative,LocationGlobal
import time
import math
from pymavlink import mavutil
from geopy.distance import geodesic

# === –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –°–ò–ú–£–õ–Ø–¢–û–†–ê ===
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ SITL –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

sitl = SITL()
sitl.download('copter', 'stable', verbose=True) 
sitl_args = [
    '-I0', 
    '--model', 'quad',
    '--home=50.450739,30.461242,161,0', # –¢–æ—á–∫–∞ –ê = –¢–æ—á–∫–∞ –∑–ª—å–æ—Ç—É = –¢–æ—á–∫–∞ "Home":  50.450739, 30.461242
    '--speedup=100'  # –®–≤–∏–¥–∫—ñ—Å—Ç—å
]
sitl.launch(sitl_args, await_ready=True, restart=True)


# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ TCP
connection_string = 'tcp:127.0.0.1:5760'
print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥—Ä–æ–Ω—É –Ω–∞ {connection_string}")
vehicle = connect(connection_string, wait_ready=True)
print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ—à–ª–æ —É—Å–ø—ñ—à–Ω–æ")


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
def wait_for_gps():
    while vehicle.location.global_relative_frame.lat is None or vehicle.location.global_relative_frame.lon is None:
        print("‚ö† –û–∂–∏–¥–∞–Ω–∏–µ GPS...", end='\r')
        time.sleep(1)
    print(f"‚úÖ GPS –≥–æ—Ç–æ–≤–∏–π! –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {vehicle.location.global_relative_frame.lat}, {vehicle.location.global_relative_frame.lon}")


def wait_until_fully_armable():
    """"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º...")
    last_print = time.time()
    while True:
        checks = [
            vehicle.is_armable,
            vehicle.gps_0.fix_type >= 3,
            vehicle.battery.level > 10,
            vehicle.ekf_ok
        ]
        if all(checks):
            break
        
        if time.time() - last_print > 1:
            print(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è: GPS={vehicle.gps_0.fix_type}, –ë–∞—Ç–∞—Ä–µ—è={vehicle.battery.level}%, EKF={'OK' if vehicle.ekf_ok else 'WAIT'}", end='\r')
            last_print = time.time()
        time.sleep(0.1)
    print("\n‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –∑–∞–ø—É—Å–∫—É!")


def arm_and_takeoff(target_altitude):
    """–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø—ñ–¥–π–æ–º—É –Ω–∞ –∑–∞–¥–∞–Ω—É –≤–∏—Å–æ—Ç—É —Å —Ç–µ—Å—Ç–∞–º–∏"""
    wait_until_fully_armable()
    
    print("üîÑ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ–∂–∏–º—É ALT_HOLD")
    vehicle.mode = VehicleMode("ALT_HOLD")
    time.sleep(1)
    
    print("‚ö° –ó–∞–ø—É—Å–∫ –º–æ—Ç–æ—Ä—ñ–≤..")
    vehicle.armed = True
    
    start_time = time.time()
    last_print = start_time
    while not vehicle.armed:
        if time.time() - start_time > 10:
            raise Exception("–ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∂–∏–º —Ç–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
        
        if time.time() - last_print > 1:
            print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –º–æ—Ç–æ—Ä—ñ–≤...", end='\r')
            last_print = time.time()
        time.sleep(0.1)
    print("\n‚úÖ –ú–æ—Ç–æ—Ä–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ!")


def alt_hold_takeoff(target_alt):
    """–ü—ñ–¥–π–æ–º –Ω–∞ –∑–∞–¥–∞–Ω—É –≤–∏—Å–æ—Ç—É –≤ —Ä–µ–∂–∏–º—ñ ALT_HOLD"""
    print(f"üõ´ –ü—ñ–¥–π–æ–º –¥–æ {target_alt} –º –≤ ALT_HOLD")
    
    start_alt = vehicle.location.global_relative_frame.alt or 0
    last_alt = start_alt
    while True:
        current_alt = vehicle.location.global_relative_frame.alt or 0
        
        if current_alt >= target_alt:
            break

        # –ü—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–∏—Å–æ—Ç–∏
        alt_error = target_alt - current_alt
        throttle = 1500 + int(70 * min(1, alt_error/3)) 
        
        send_rc_control(1500, 1500, throttle, 1500)
        
        if abs(current_alt - last_alt) > 0.5 or current_alt == start_alt:
            print(f"–í–∏—Å–æ—Ç–∞: {current_alt:.1f}/{target_alt} –º", end='\r')
            last_alt = current_alt
        time.sleep(0.1)
    
    send_rc_control(1500, 1500, 1500, 1500)
    print(f"\nüõ¨ –î–æ—Å—è–≥–Ω—É—Ç–æ —Ü—ñ–ª—å–æ–≤—É –≤–∏—Å–æ—Ç—É: {current_alt:.1f} –º")


def send_rc_control(roll, pitch, throttle, yaw):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è RC –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
    msg = vehicle.message_factory.rc_channels_override_encode(
        0, 0,  # target_system, target_component
        roll, pitch, throttle, yaw,
        0, 0, 0, 0
    )
    vehicle.send_mavlink(msg)
    vehicle.flush()

def get_bearing_to_point(lat1, lon1, lat2, lon2):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–∑–∏–º—É—Ç—É –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏"""
    dLon = math.radians(lon2 - lon1)
    lat1, lat2 = math.radians(lat1), math.radians(lat2)
    
    y = math.sin(dLon) * math.cos(lat2)
    x = math.cos(lat1)*math.sin(lat2) - math.sin(lat1)*math.cos(lat2)*math.cos(dLon)
    bearing = math.degrees(math.atan2(y, x))
    return (bearing + 360) % 360

def move_to_location(target_lat, target_lon):
    print(f"üîÑ –†—É—Ö –¥–æ —Ç–æ—á–∫–∏  {target_lat}, {target_lon}")
    
    target_alt = vehicle.location.global_relative_frame.alt
    HIGH_SPEED_DISTANCE = 20  # –î–∏—Å—Ç–∞–Ω—Ü—ñ—è –ø–æ—á–∞—Ç–∫—É —É–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–Ω—è
    PRECISION_DISTANCE = 10   # –î–∏—Å—Ç–∞–Ω—Ü—ñ—è –≤–≤–∞–∂–∞—î—Ç—å—Å—è –¥–æ—Å—è–≥–Ω—É—Ç–æ—é
    MIN_SPEED = 1520          
    BASE_SPEED = 1650         
    
    KP = 1.8  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞

    # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    while True:
        current = vehicle.location.global_relative_frame
        distance = geodesic((current.lat, current.lon), (target_lat, target_lon)).meters
        current_speed = math.sqrt(vehicle.velocity[0]**2 + vehicle.velocity[1]**2)
        current_alt = current.alt or 0
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        desired_heading = get_bearing_to_point(current.lat, current.lon, target_lat, target_lon)
        heading_error = (desired_heading - vehicle.heading + 540) % 360 - 180
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é (3 —Ñ–∞–∑—ã)
        if distance > HIGH_SPEED_DISTANCE:
            # –ü–æ–ª–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –¥–∞–ª—å–Ω–∏—Ö –¥–∏—Å—Ç–∞–Ω—Ü–∏—è—Ö
            speed = BASE_SPEED
        elif distance > 5:
            # –ü–ª–∞–≤–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏
            speed = MIN_SPEED + int((BASE_SPEED - MIN_SPEED) * (distance-5)/(HIGH_SPEED_DISTANCE-5))
        else:
            # –ü–æ—á—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–±–ª–∏–∑–∏ —Ü–µ–ª–∏
            speed = 1500
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        roll_correction = KP * heading_error
        roll = 1500 + int(max(-400, min(400, roll_correction)))
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–∏—Å–æ—Ç–∏
        alt_error = target_alt - current_alt
        throttle = 1500 + int(max(-150, min(150, alt_error * 15)))
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥
        send_rc_control(roll, speed, throttle, 1500)
        
        # –£–º–æ–≤–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        if distance < PRECISION_DISTANCE and current_speed < 1.0:
            print("\nüéØ –¢–æ—á–∫–∞ –º–∞–π–∂–µ –¥–æ—Å—è–≥–Ω—É—Ç–∞ (10–º), –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...")
            break
            
        print(f"–î–∏—Å—Ç–∞–Ω—Ü—ñ—è: {distance:5.1f} –º | –®–≤–∏–¥–∫—ñ—Å—Ç—å: {current_speed:3.1f} –º/—Å | –í–∏—Å–æ—Ç–∞: {current_alt:5.1f} –º", end='\r')
        time.sleep(0.1)
    
    # –¢–æ—á–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
    print("üîß –¢–æ—á–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è...")
    for i in range(50, 0, -1):  # 5 —Å–µ–∫—É–Ω–¥ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        send_rc_control(1500, 1500, 1500, 1500)
        print(f"–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è... {i/10:.1f}—Å", end='\r')
        time.sleep(0.1)
    
    final_pos = vehicle.location.global_relative_frame
    accuracy = geodesic((final_pos.lat, final_pos.lon), (target_lat, target_lon)).meters
    print(f"\n‚úÖ –ü–æ–∑–∏—Ü—ñ—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ—Ö–∏–±–∫–∞: {accuracy:.1f} –º")


def set_yaw(target_heading):
    """–ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–π –∞–∑–∏–º—É—Ç –∑ —É—Ç—Ä–∏–º–∞–Ω–Ω—è–º –ø–æ–∑–∏—Ü—ñ—ó"""

    print(f"üîÑ –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ –∫—É—Ä—Å {target_heading}¬∞...")
    
    target_alt = vehicle.location.global_relative_frame.alt
    YAW_SPEED = 60  # –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–∞ (PWM)
    last_heading = vehicle.heading
    
    while True:
        current_heading = vehicle.heading
        heading_error = (target_heading - current_heading + 540) % 360 - 180
        
        # –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if abs(heading_error) < 3:
            break
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        yaw_value = 1500 + int(YAW_SPEED * (1 if heading_error > 0 else -1))
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã—Å–æ—Ç—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
        current_alt = vehicle.location.global_relative_frame.alt or 0
        alt_error = target_alt - current_alt
        throttle = 1500 + int(max(-200, min(200, alt_error * 20)))
        
        # –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        roll = 1500 + int(30 * math.sin(time.time()))  # –ú–∏–∫—Ä–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        pitch = 1500  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        
        send_rc_control(roll, pitch, throttle, yaw_value)
        
        if abs(current_heading - last_heading) > 1:
            print(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {current_heading:.1f}¬∞ ‚Üí –¶—ñ–ª—å: {target_heading}¬∞ | –ü–æ–º–∏–ª–∫–∞: {heading_error:.1f}¬∞", end='\r')
            last_heading = current_heading
        time.sleep(0.1)
    
    send_rc_control(1500, 1500, 1500, 1500)
    print(f"\n‚úÖ –ü–æ–≤–æ—Ä–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∏–Ω–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: {vehicle.heading:.1f}¬∞")


B_LAT, B_LON = 50.443326, 30.448078
TARGET_ALTITUDE = 100

try:
    # –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    wait_for_gps()
    arm_and_takeoff(TARGET_ALTITUDE)
    alt_hold_takeoff(TARGET_ALTITUDE)
    move_to_location(B_LAT, B_LON)
    set_yaw(350)
    wait_for_gps()
    print("‚úÖ –ú—ñ—Å—ñ—é –≤–∏–∫–æ–Ω–∞–Ω–æ! –ü–æ—Å–∞–¥–∫–∞...")
    vehicle.mode = VehicleMode("LAND")

except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    vehicle.mode = VehicleMode("LAND")

finally:
    vehicle.close()
    sitl.stop()